/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node *nxt;
};
void linkedList(struct Node* ptr)
{
    while(ptr!= NULL)
    {
        printf("%d\n",ptr->data);
        ptr=ptr->nxt;
    }
}
//Case 1
struct Node* insertAtBegin(struct Node* head,int data)
{
    struct Node* ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;
    ptr->nxt = head;
    return ptr;
}
//Case 2
struct Node* insertAtIndex(struct Node* head,int data,int index)
{
    struct Node* ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;
    struct Node* p = head;
    int i=0;
    while(i!=index-1)
    {
        p=p->nxt;
        i++;
    }
    ptr->nxt=p->nxt;
    p->nxt=ptr;
    return head;
}
//Case 3
struct Node* insertAfterNode(struct Node* head,struct Node* prev,int data)
{
    struct Node* ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;
    ptr->nxt=prev->nxt;
    prev->nxt=ptr;
    return head;
}
//Case 4
struct Node* insertAtEnd(struct Node* head,int data)
{
    struct Node* ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;
    struct Node* p = head;
    while(p->nxt!=NULL)
    {
        p = p->nxt;
    }
    p->nxt=ptr;
    ptr->nxt=NULL;
    return head;
}
void main()
{
    struct Node *head;
    struct Node *first;
    struct Node *second;
    head=(struct Node*)malloc(sizeof(struct Node));
    first=(struct Node*)malloc(sizeof(struct Node));
    second=(struct Node*)malloc(sizeof(struct Node));

    head->data=10;
    head->nxt=first;
    
    first->data=20;
    first->nxt=second;
    
    second->data=30;
    second->nxt=NULL;
    
    //linkedList(head);
    //head=insertAtEnd(head,45);
    //head=insertAtBegin(head,6);
    //head=insertAtIndex(head,99,1);
    head=insertAfterNode(head,first,51);
    linkedList(head);
}
